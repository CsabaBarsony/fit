(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

var Router = window.ReactRouter;
var DefaultRoute = Router.DefaultRoute;
var NotFoundRoute = Router.NotFoundRoute;
var Link = Router.Link;
var Route = Router.Route;
var RouteHandler = Router.RouteHandler;
var Home = require("./components/home");
var Exercises = require("./components/exercises");
var Workout= require("./components/workout");
var NotFound = require("./components/not_found");
var auth = require("./helpers/auth");

var App = React.createClass({displayName: "App",
	getInitialState: function(){
		return { auth: "authorizing" };
	},
	componentDidMount: function(){
		var that = this;
		auth.authorize(function(result){
			if(result) that.setState({ auth: "authorized" });
			else window.location.href = auth.loginPage;
		});
	},
	logout: function(){
		this.setState({ auth: "loggingOut" });
		auth.logout(function(){
			window.location.href = auth.loginPage;
		});
	},
	render: function () {
		if(this.state.auth === "authorizing") return React.createElement("h1", null, "Authorizing...");
		else if(this.state.auth === "loggingOut") return React.createElement("h1", null, "Logging out...")
		else if(this.state.auth === "authorized"){
			return (
				React.createElement("div", null, 
					React.createElement("header", null, 
						React.createElement("ul", null, 
							React.createElement("li", null, React.createElement(Link, {to: "home"}, "Home")), 
							React.createElement("li", null, React.createElement(Link, {to: "exercises"}, "Exercises")), 
							React.createElement("li", null, React.createElement(Link, {to: "workout"}, "New Workout")), 
							React.createElement("li", null, 
								React.createElement("a", {href: "#", onClick: this.logout}, "Logout")
							)
						), 
						React.createElement("div", null, 
							React.createElement("p", null, "user: ", auth.getUsername())
						)
					), 
					React.createElement(RouteHandler, null)
				)
			);
		}
	}
});

var routes = (
	React.createElement(Route, {name: "home", path: "/", handler: App}, 
		React.createElement(Route, {name: "exercises", handler: Exercises}), 
		React.createElement(Route, {name: "workout", handler: Workout}), 
		React.createElement(DefaultRoute, {handler: Home}), 
		React.createElement(NotFoundRoute, {handler: NotFound})
	)
);

Router.run(routes, function(Handler) {
	React.render(React.createElement(Handler, null), document.body);
});


},{"./components/exercises":3,"./components/home":4,"./components/not_found":5,"./components/workout":6,"./helpers/auth":8}],2:[function(require,module,exports){
/** @jsx React.DOM */

var ExerciseForWorkout = React.createClass({displayName: "ExerciseForWorkout",
	remove: function(){
		this.props.remove(this.props.exerciseKey);
	},
	render: function(){
		var exercise = this.props.exercise;
		return (
			React.createElement("div", null, 
				React.createElement("span", null, exercise.name, " ", exercise.weight, " kg"), React.createElement("button", {onClick: this.remove}, "remove")
			)
		);
	}
});

module.exports = ExerciseForWorkout;

},{}],3:[function(require,module,exports){
/** @jsx React.DOM */

var api = require("../helpers/api");

var Exercises = React.createClass({displayName: "Exercises",
	getInitialState: function(){
		return {
			state: "loading_exercises",
			exercises: []
		}
	},
	componentDidMount: function(){
		api.get("/exercises", function(exercises){
			console.log(exercises);
		});
	},
	render: function(){
		return (
			React.createElement("h2", null, "Exercises")
		);
	}
});

module.exports = Exercises;

},{"../helpers/api":7}],4:[function(require,module,exports){
/** @jsx React.DOM */

var api = require("../helpers/api");

var Home = React.createClass({displayName: "Home",
	testGet: function(){
		api.get("/secret", function(result){
			console.log("get working", result);
		});
	},
	testPost: function(){
		api.post("/secret", { testData: "majom" }, function(result){
			console.log("post working", result);
		})
	},
	render: function(){
		return (
			React.createElement("div", null, 
				React.createElement("h2", null, "Home"), 
				React.createElement("button", {type: "text", onClick: this.testGet}, "Get"), 
				React.createElement("button", {type: "text", onClick: this.testPost}, "Post")
			)
		);
	}
});

module.exports = Home;


},{"../helpers/api":7}],5:[function(require,module,exports){
/** @jsx React.DOM */

var NotFound = React.createClass({displayName: "NotFound",
	render: function(){
		return (
			React.createElement("div", null, "Page is not found")
		);
	}
});

module.exports = NotFound;

},{}],6:[function(require,module,exports){
/** @jsx React.DOM */

var api = require("../helpers/api");
var ExerciseForWorkout = require("./exerciseForWorkout");

var Workout = React.createClass({displayName: "Workout",
	getInitialState: function(){
		return {
			exercises: null,
			selectedExercise: null,
			exerciseForWorkoutList: []
		};
	},
	componentDidMount: function(){
		var that = this;
		api.get("/exercises", function(exercises){
			that.setState({
				exercises: exercises,
				selectedExercise: exercises[0]
			});
		});
	},
	addExercise: function(){
		var weight = prompt("Weight? (kg)", 0);
		var sets = prompt("Number of sets?", 1);
		var selectedExerciseList = [];
		for(var i = 0; i < sets; i++){
			selectedExerciseList.push({
				name: this.state.selectedExercise,
				weight: weight
			});
		}
		var newState = React.addons.update(this.state, {
			exerciseForWorkoutList: {
				$push: selectedExerciseList
			}
		});
		this.setState(newState);
	},
	changeExercise: function(event){
		this.setState({
			exercises: this.state.exercises,
			selectedExercise: event.target.value
		});
	},
	removeExerciseFromWorkout: function(key){
		console.log("key", key);
		var newState = React.addons.update(this.state, {
			exerciseForWorkoutList: {
				$splice: [[key, 1]]
			}
		});
		this.setState(newState);
	},
	render: function(){
		if(this.state.exercises){
			var exerciseOptions = [],
				key = 0;
			_.each(this.state.exercises, function(exercise){
				var option = (
					React.createElement("option", {key: Math.random(), value: exercise}, exercise)
				);
				exerciseOptions.push(option);
			});
			var that = this;
			var exerciseForWorkoutList = [];
			_.each(this.state.exerciseForWorkoutList, function(exercise){
				// The sequence of the 'key' and 'exerciseKey' properties is important because of the incrementation
				var element = (
					React.createElement(ExerciseForWorkout, {key: key, exerciseKey: key++, exercise: exercise, remove: that.removeExerciseFromWorkout})
				);
				exerciseForWorkoutList.push(element);
			});
			return (
				React.createElement("div", null, 
					React.createElement("h2", null, "New Workout"), 
					React.createElement("div", null, this.state.selectedExercise), 
					React.createElement("select", {onChange: this.changeExercise}, 
						exerciseOptions
					), 
					React.createElement("button", {onClick: this.addExercise}, "Add exercise"), 
					exerciseForWorkoutList
				)
			);
		}
		else{
			return (
				React.createElement("h2", null, "Loading...")
			);
		}
	}
});

module.exports = Workout;

},{"../helpers/api":7,"./exerciseForWorkout":2}],7:[function(require,module,exports){
var auth = require("./auth");

module.exports = {
	log: function(text){
		console.log(text);
	},
	get: function(url, success){
		$.ajax({
			url: url,
			type: 'GET',
			headers: {
				"x-auth-token": auth.getToken(),
				"x-auth-username": auth.getUsername()
			},
			success: function(result) {
				success(result);
			}.bind(this),
			error: function(xhr, status, err) {
				console.log(status);
				if(xhr.status >= 400) window.location.href = auth.loginPage;
			}.bind(this)
		});
	},
	post: function(url, data, success){
		$.ajax({
			url: url,
			type: 'POST',
			data: data,
			headers: {
				"x-auth-token": auth.getToken(),
				"x-auth-username": auth.getUsername()
			},
			success: function(result) {
				success(result);
			}.bind(this),
			error: function(xhr, status, err) {
				console.log(status);
				if(xhr.status >= 400) window.location.href = auth.loginPage;
			}.bind(this)
		});
	}
};

},{"./auth":8}],8:[function(require,module,exports){
var auth = {
	loginPage: "/login.html",
	logout: function(callback){
		$.ajax({
			url: "/logout",
			type: 'POST',
			data: {
				username: this.getUsername()
			},
			success: function(result) {
				delete localStorage.token;
				delete localStorage.username;
				callback();
			}.bind(this),
			error: function(xhr, status, err) {
				console.log("error while loggint out");
				delete localStorage.token;
				delete localStorage.username;
				callback();
			}.bind(this)
		});
	},
	authorize: function(callback){
		if(!this.getToken()) {
			callback(false);
			return;
		}

		$.ajax({
			url: "/authorize",
			type: 'GET',
			headers: {
				"x-auth-token": this.getToken(),
				"x-auth-username": this.getUsername()
			},
			success: function(result) {
				callback(true);
			}.bind(this),
			error: function(xhr, status, err) {
				callback(false);
			}.bind(this)
		});
	},
	getToken: function(){
		return localStorage.token;
	},
	getUsername: function(){
		return localStorage.username;
	},
	loggedIn: function(){
		return this.getToken();
	},
	onChange: function(){}
};

module.exports = auth;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
